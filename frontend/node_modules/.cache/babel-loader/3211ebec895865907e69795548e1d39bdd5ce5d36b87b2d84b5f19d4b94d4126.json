{"ast":null,"code":"class WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.messageHandlers = [];\n  }\n  connect(url) {\n    return new Promise((resolve, reject) => {\n      this.socket = new WebSocket(url);\n      this.socket.onopen = () => {\n        console.log('WebSocket connection established');\n        resolve();\n      };\n      this.socket.onmessage = event => {\n        const data = JSON.parse(event.data);\n        this.messageHandlers.forEach(handler => handler(data));\n      };\n      this.socket.onerror = error => {\n        console.error('WebSocket error:', error);\n        reject(error);\n      };\n      this.socket.onclose = () => {\n        console.log('WebSocket connection closed');\n      };\n    });\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n  }\n  sendMessage(messages, model = 'gpt-3.5-turbo', temperature = 0.7) {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      const payload = {\n        messages,\n        model,\n        temperature\n      };\n      this.socket.send(JSON.stringify(payload));\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  }\n  onMessage(handler) {\n    this.messageHandlers.push(handler);\n  }\n  removeMessageHandler(handler) {\n    this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n  }\n}\nexport default new WebSocketService();","map":{"version":3,"names":["WebSocketService","constructor","socket","messageHandlers","connect","url","Promise","resolve","reject","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","forEach","handler","onerror","error","onclose","disconnect","close","sendMessage","messages","model","temperature","readyState","OPEN","payload","send","stringify","onMessage","push","removeMessageHandler","filter","h"],"sources":["/Users/matthewkoen/Documents/Brainbase/solution_take_home/frontend/src/services/websocket.ts"],"sourcesContent":["import { ChatMessage, WebSocketMessage } from '../types';\n\nclass WebSocketService {\n  private socket: WebSocket | null = null;\n  private messageHandlers: ((message: WebSocketMessage) => void)[] = [];\n\n  connect(url: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.socket = new WebSocket(url);\n\n      this.socket.onopen = () => {\n        console.log('WebSocket connection established');\n        resolve();\n      };\n\n      this.socket.onmessage = (event) => {\n        const data = JSON.parse(event.data) as WebSocketMessage;\n        this.messageHandlers.forEach(handler => handler(data));\n      };\n\n      this.socket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        reject(error);\n      };\n\n      this.socket.onclose = () => {\n        console.log('WebSocket connection closed');\n      };\n    });\n  }\n\n  disconnect(): void {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n  }\n\n  sendMessage(messages: ChatMessage[], model: string = 'gpt-3.5-turbo', temperature: number = 0.7): void {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      const payload = {\n        messages,\n        model,\n        temperature\n      };\n      this.socket.send(JSON.stringify(payload));\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  }\n\n  onMessage(handler: (message: WebSocketMessage) => void): void {\n    this.messageHandlers.push(handler);\n  }\n\n  removeMessageHandler(handler: (message: WebSocketMessage) => void): void {\n    this.messageHandlers = this.messageHandlers.filter(h => h !== handler);\n  }\n}\n\nexport default new WebSocketService(); "],"mappings":"AAEA,MAAMA,gBAAgB,CAAC;EAAAC,YAAA;IAAA,KACbC,MAAM,GAAqB,IAAI;IAAA,KAC/BC,eAAe,GAA4C,EAAE;EAAA;EAErEC,OAAOA,CAACC,GAAW,EAAiB;IAClC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAI,CAACN,MAAM,GAAG,IAAIO,SAAS,CAACJ,GAAG,CAAC;MAEhC,IAAI,CAACH,MAAM,CAACQ,MAAM,GAAG,MAAM;QACzBC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QAC/CL,OAAO,CAAC,CAAC;MACX,CAAC;MAED,IAAI,CAACL,MAAM,CAACW,SAAS,GAAIC,KAAK,IAAK;QACjC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAqB;QACvD,IAAI,CAACZ,eAAe,CAACe,OAAO,CAACC,OAAO,IAAIA,OAAO,CAACJ,IAAI,CAAC,CAAC;MACxD,CAAC;MAED,IAAI,CAACb,MAAM,CAACkB,OAAO,GAAIC,KAAK,IAAK;QAC/BV,OAAO,CAACU,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;QACxCb,MAAM,CAACa,KAAK,CAAC;MACf,CAAC;MAED,IAAI,CAACnB,MAAM,CAACoB,OAAO,GAAG,MAAM;QAC1BX,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC5C,CAAC;IACH,CAAC,CAAC;EACJ;EAEAW,UAAUA,CAAA,EAAS;IACjB,IAAI,IAAI,CAACrB,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACsB,KAAK,CAAC,CAAC;MACnB,IAAI,CAACtB,MAAM,GAAG,IAAI;IACpB;EACF;EAEAuB,WAAWA,CAACC,QAAuB,EAAEC,KAAa,GAAG,eAAe,EAAEC,WAAmB,GAAG,GAAG,EAAQ;IACrG,IAAI,IAAI,CAAC1B,MAAM,IAAI,IAAI,CAACA,MAAM,CAAC2B,UAAU,KAAKpB,SAAS,CAACqB,IAAI,EAAE;MAC5D,MAAMC,OAAO,GAAG;QACdL,QAAQ;QACRC,KAAK;QACLC;MACF,CAAC;MACD,IAAI,CAAC1B,MAAM,CAAC8B,IAAI,CAAChB,IAAI,CAACiB,SAAS,CAACF,OAAO,CAAC,CAAC;IAC3C,CAAC,MAAM;MACLpB,OAAO,CAACU,KAAK,CAAC,4BAA4B,CAAC;IAC7C;EACF;EAEAa,SAASA,CAACf,OAA4C,EAAQ;IAC5D,IAAI,CAAChB,eAAe,CAACgC,IAAI,CAAChB,OAAO,CAAC;EACpC;EAEAiB,oBAAoBA,CAACjB,OAA4C,EAAQ;IACvE,IAAI,CAAChB,eAAe,GAAG,IAAI,CAACA,eAAe,CAACkC,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKnB,OAAO,CAAC;EACxE;AACF;AAEA,eAAe,IAAInB,gBAAgB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}